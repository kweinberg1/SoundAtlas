<DockPanel x:Class="SoundAtlas2.Atlas"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ac="clr-namespace:AdornedControl;assembly=AdornedControl"
             xmlns:local="clr-namespace:SoundAtlas2"
             xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
             xmlns:NetworkModel="clr-namespace:SoundAtlas2.Model;assembly=SoundAtlas2.Model"
             xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
             mc:Ignorable="d" 
            d:DesignHeight="300" d:DesignWidth="300" >

    <!-- Grid placed below the zoom and pan control that contains the zoom slider, zoom label and some buttons. -->
    <DockPanel.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- 
                Merge in the resource dictionary that is shared between the main window and the overview window.
                -->
                <ResourceDictionary 
                    Source="SharedVisualTemplates.xaml"
                    />

            </ResourceDictionary.MergedDictionaries>

            <!-- UI commands. -->

            <RoutedUICommand x:Key="Commands.GenerateNetwork" />
            <RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
            <RoutedUICommand x:Key="Commands.CreateNode" />
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />

            <!-- 
            This converts from a scale value to a percentage value.
            It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <local:ScaleToPercentConverter 
                x:Key="scaleToPercentConverter" 
                />

            <!-- 
            This graphic is used to indicate that a connection cannot be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type local:ConnectionBadIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="Resources/block_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            This graphic is used to indicate that a connection can be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type local:ConnectionOkIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="Resources/tick_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
            <Style 
                TargetType="{x:Type NetworkUI:ConnectorItem}"
                >
                <!-- 
                Data-binding for the connector hotspot.
                ConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
                <Setter 
                    Property="Hotspot"
                    Value="{Binding Hotspot, Mode=OneWayToSource}"
                    />

                <!-- The visual template. -->
                <Setter 
                    Property="Template"
                    >
                    <Setter.Value>
                        <ControlTemplate 
                            TargetType="{x:Type NetworkUI:ConnectorItem}"
                            >
                            <!-- The visual for the connector. -->
                            <!--<Ellipse
                                Stroke="{StaticResource nodeBorderBrush}"
                                Fill="{StaticResource connectorBackgroundBrush}"
                                />-->
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 
            Template for the button that is used to delete nodes and connections in the graph.
            This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
            <ControlTemplate 
                x:Key="deleteButtonTemplate"
                TargetType="{x:Type Button}"
                >
                <Grid
                    x:Name="grid"
                    >
                    <Grid.RenderTransform>
                        <ScaleTransform
                            ScaleX="1"
                            ScaleY="1"
                            CenterX="10"
                            CenterY="10"
                            />
                    </Grid.RenderTransform>
                    <Ellipse
                        x:Name="shadow"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="Gray"
                        >
                        <Ellipse.RenderTransform>
                            <TranslateTransform
                                X="1.5"
                                Y="1.5"
                                />
                        </Ellipse.RenderTransform>
                    </Ellipse>
                    <Ellipse
                        x:Name="ellipse"
                        Stroke="Black"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="White"
                        />
                    <Image
                        Source="Resources\scissors.png" 
                        Margin="2"
                        />
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger
                        RoutedEvent="Mouse.MouseEnter"
                        >
                        <!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger
                        RoutedEvent="Mouse.MouseLeave"
                        >
                        <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate
                DataType="{x:Type NetworkModel:ConnectionViewModel}"
                >

             
                <!-- The connection is represented by a curved arrow. -->
                <local:CurvedArrow
                    Stroke="{StaticResource connectionBrush}"
                    StrokeThickness="1"
                    Fill="{StaticResource connectionBrush}"
                    ArrowHeadWidth="5"
                    ArrowHeadLength="5"
                    Points="{Binding Points}"
                    />
            </DataTemplate>

            <!-- Define a data-template for the 'NodeViewModel' class. -->
            <DataTemplate
                DataType="{x:Type NetworkModel:NodeViewModel}"
                >
                <!-- The margin has been selected so that the selection rect nicely covers the entire node. -->
                <Grid
                    MinWidth="120"
                    Margin="0, 0, 0, 0"
                    SizeChanged="Node_SizeChanged"
                    >

                    <Grid.ContextMenu>
                        <ContextMenu>
                            <MenuItem
                                Header="Add Tracks to Playlist"
                                Click="OnAddTracksClick"
                                ToolTip="Added tracks to the playlist."
                                Tag="{Binding}"
                                />
                            <MenuItem
                                Header="Follow Artist"
                                Click="OnFollowArtistClick"
                                ToolTip="Follow the artist."
                                Tag="{Binding}"
                                Visibility="{Binding IsHighlighted, Converter={StaticResource inverseBooleanToVisibilityConverter}}"/>
                            <MenuItem
                                Header="Unfollow Artist"
                                Click="OnUnfollowArtistClick"
                                ToolTip="Unfollow the artist."
                                Tag="{Binding}"
                                Visibility="{Binding IsHighlighted, Converter={StaticResource booleanToVisibilityConverter}}"/>
                        </ContextMenu>
                    </Grid.ContextMenu>
                        
                    <!-- This rectangle is the main visual for the node. -->

                    <Rectangle
                        Stroke="{StaticResource nodeBorderBrush}"
                        StrokeThickness="1.3"
                        Fill="{StaticResource nodeFillBrush}"
                        />

                    <!-- 
                    This grid contains the node's connectors.
                    The margin is negative so that the connectors overlap the body of the node and it's selection border.
                    -->
                    <Grid
                        Margin="0,4,0,4"
                        >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="40" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <!-- spacer -->
                            <RowDefinition Height="2" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid.Resources>
                            <BitmapImage x:Key="UnselectedIcon" UriSource="Images/unselected.png"/>
                            <BitmapImage x:Key="StarredIcon" UriSource="Images/starred.png"/>
                            <BitmapImage x:Key="DownwardArrowIcon" UriSource="Images/downwardarrow.png"/>
                            <BitmapImage x:Key="HeadphonesIcon" UriSource="Images/headphones.png"/>
                            <BitmapImage x:Key="AddTracksIcon" UriSource="Images/addtracks.png"/>
                        </Grid.Resources>

                        <StackPanel Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Left" Margin="12,0,0,0">

                            <!-- Displays the node's input connectors. -->
                            <ItemsControl 
                                ItemsSource="{Binding InputConnectors}"
                                ItemTemplate="{StaticResource inputConnectorTemplate}"
                                Focusable="False"
                                Visibility="{Binding ShowInputConnectors, Converter={StaticResource booleanToVisibilityConverter}}"
                                />

                            <Button Click="OnAddTracksClick" Tag="{Binding}" ToolTip="Add Tracks to Playlist" Padding="-4">
                                <Image Stretch="Fill" Width="24" Height="24" Source="{StaticResource AddTracksIcon}"/>
                            </Button>

                            <TextBlock Margin="5,0,5,0"
                                Text="{Binding NumTracks}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{StaticResource nodeFillBrush}"
                                Foreground="{StaticResource nodeTextBrush}">
                                <TextBlock.ToolTip>
                                    <ToolTip 
                                        Content="{Binding NumTracks}"
                                        ContentStringFormat="{}{0} tracks in playlist.">
                                    </ToolTip>
                                </TextBlock.ToolTip>
                            </TextBlock>

                            <!-- The name of the node. -->
                            <TextBlock Margin="5,0,5,0"
                                Text="{Binding Name}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{StaticResource nodeFillBrush}"
                                Foreground="{StaticResource nodeTextBrush}"
                                />
                        </StackPanel>
                        <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,0,12,0">
                            <Button Click="OnExpandRelatedArtistsButtonClick" Tag="{Binding}" IsEnabled="{Binding IsChildrenExpanded, Converter={StaticResource InverseBooleanConverter}}" ToolTip="Find Similar Artists">
                                <Button.Template>
                                    <ControlTemplate>
                                        <Border HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Image Source="{StaticResource UnselectedIcon}" 
                                            Width="16" 
                                            Height="16"/>
                                        </Border>
                                    </ControlTemplate>
                                </Button.Template>
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}" >
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                <Button.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem
                                            Header="Add All Related Artists"
                                            Click="OnExpandAllRelatedArtistsButtonClick"
                                            ToolTip="Adds all known related artists."
                                            Tag="{Binding}"
                                            />
                                    </ContextMenu>
                                </Button.ContextMenu>
                            </Button>

                            <!-- Displays the node's output connectors. -->
                            <ItemsControl
                                ItemsSource="{Binding OutputConnectors}"
                                ItemTemplate="{StaticResource outputConnectorTemplate}"
                                Focusable="False"
                                Visibility="{Binding ShowOutputConnectors, Converter={StaticResource booleanToVisibilityConverter}}"
                                >
                            </ItemsControl>
                        </StackPanel>
                    </Grid>
                </Grid>
            </DataTemplate>

        </ResourceDictionary>

    </DockPanel.Resources>
    <DockPanel.Background>
        <SolidColorBrush Color="{Binding backgroundColor}"/>
    </DockPanel.Background>

    <DockPanel.InputBindings>

        <!-- Bind input to commands. -->

        <KeyBinding
			Key="Del"
			Command="{StaticResource Commands.DeleteSelectedNodes}"
			/>
        <KeyBinding
			Key="Minus"
			Command="{StaticResource Commands.ZoomOut}"
			/>
        <KeyBinding
			Key="Plus"
			Command="{StaticResource Commands.ZoomIn}"
			/>
        <KeyBinding
			Key="Backspace"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>
        <KeyBinding
			Key="Space"
			Command="{StaticResource Commands.FitContent}"
			/>

    </DockPanel.InputBindings>

    <DockPanel.CommandBindings>

        <!-- Bind commands to event handlers.-->

        <CommandBinding 
            Command="{StaticResource Commands.GenerateNetwork}"
            Executed="GenerateNetwork_Executed"
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedNodes}" 
            Executed="DeleteSelectedNodes_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.CreateNode}" 
            Executed="CreateNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.FitContent}" 
            Executed="FitContent_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

    </DockPanel.CommandBindings>

    <DockPanel.ContextMenu>

        <ContextMenu>

            <MenuItem
                Header="Regenerate Network"
                Command="{StaticResource Commands.GenerateNetwork}"
                ToolTip="Regenerates the network to better organize the graph."
                />
            
            <!-- Clicking this menu item creates a new node. -->

            <MenuItem
                Header="Create Node"
                Command="{StaticResource Commands.CreateNode}"
                ToolTip="Creates a new node"
                />

            <Separator />
            <MenuItem
                Header="Fit"
                Command="{StaticResource Commands.FitContent}"
                ToolTip="Fit selected nodes to the viewport, when nothing is selected fits all nodes to the viewport"
                />
            <MenuItem
                Header="Fill"
                Command="{StaticResource Commands.Fill}"
                ToolTip="Fit the entire content area to the viewport"
                />
            <MenuItem
                Header="100%"
                Command="{StaticResource Commands.OneHundredPercent}"
                ToolTip="Scale the content to 100%"
                />
            <MenuItem
                Header="Previous Zoom"
                Command="{StaticResource Commands.JumpBackToPrevZoom}"
                ToolTip="Return to the previous zoom level"
                />

            <Separator />

            <MenuItem
                Header="Zoom Out"
                Command="{StaticResource Commands.ZoomOut}"
                ToolTip="Zooms out from the canvas"
                />
            <MenuItem
                    Header="Zoom In"
                    Command="{StaticResource Commands.ZoomOut}"
                    ToolTip="Zooms in on the canvas"
                    />

        </ContextMenu>
    </DockPanel.ContextMenu>

    <!-- 
        The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
        Focusable is set to False because it is only that NetworkView that I want to be focusable.
        -->
    <ScrollViewer
            CanContentScroll="True"
            VerticalScrollBarVisibility="Visible"
            HorizontalScrollBarVisibility="Visible"
            Background="{StaticResource controlBackground}"
            Focusable="False"
            >

        <!-- 
            The ZoomAndPanControl displays the NetworkView as its content.
            We can use the mouse to zoom and pan about the NetworkView.
            -->
        <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                ContentScale="{Binding ContentScale, Mode=TwoWay}"
                ContentOffsetX="{Binding ContentOffsetX, Mode=TwoWay}"
                ContentOffsetY="{Binding ContentOffsetY, Mode=TwoWay}"
                ContentViewportWidth="{Binding ContentViewportWidth, Mode=OneWayToSource}"
                ContentViewportHeight="{Binding ContentViewportHeight, Mode=OneWayToSource}"

                Focusable="False"
                >
            <!--
                We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
                we zoom in and out using the ZoomAndPanControl
                -->
            <AdornerDecorator>
                <!--
                    This grid specifies the size of the ZoomAndPanControl's content.
                    It wraps up both the NetworkView and drag-zooming Canvas.
                    -->
                <Grid
                        Width="{Binding ContentWidth}"
                        Height="{Binding ContentHeight}"
                        Background="{StaticResource controlBackground}"
                        >

                    <!-- In this sample the NetworkView is the content displayed by the ZoomAndPanControl. -->

                    <NetworkUI:NetworkView
                            x:Name="networkControl"
                            
                            NodesSource="{Binding Network.Nodes}"
                            ConnectionsSource="{Binding Path=Network.Connections}"
                            
                            ConnectionDragStarted="networkControl_ConnectionDragStarted"
                            QueryConnectionFeedback="networkControl_QueryConnectionFeedback"
                            ConnectionDragging="networkControl_ConnectionDragging"                            
                            ConnectionDragCompleted="networkControl_ConnectionDragCompleted"
                            SelectionChanged="networkControl_SelectionChanged"
                            
                            MouseDown="networkControl_MouseDown"
                            MouseUp="networkControl_MouseUp"
                            MouseMove="networkControl_MouseMove"
                            MouseWheel="networkControl_MouseWheel"
                            Background="{StaticResource controlBackground}"
                            />

                    <!--
                        This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                        uses to specify an area to zoom in on.
                        -->
                    <Canvas
                            x:Name="dragZoomCanvas"
                            Visibility="Collapsed"
                            >
                        <Border 
                                x:Name="dragZoomBorder"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Background="Silver"
                                CornerRadius="1"
                                Opacity="0"
                                />
                    </Canvas>
                </Grid>
            </AdornerDecorator>
        </ZoomAndPan:ZoomAndPanControl>
    </ScrollViewer>
</DockPanel>
