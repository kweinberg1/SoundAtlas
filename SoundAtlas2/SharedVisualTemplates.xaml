<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:SoundAtlas="clr-namespace:SoundAtlas2"    
    xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
    x:Class="SoundAtlas2.SharedVisualTemplates"
    >
    
    <BooleanToVisibilityConverter
        x:Key="booleanToVisibilityConverter" 
        />

    <SoundAtlas:InverseBooleanToVisibilityConverter
        x:Key="inverseBooleanToVisibilityConverter" 
        />

    <SoundAtlas:InverseBooleanConverter
        x:Key="InverseBooleanConverter" 
        />

    <!-- The border brush for nodes. -->
    <SolidColorBrush
        x:Key="nodeBorderBrush"
        Color="Gray"
        />

    <!-- The fill brush for nodes. -->
    <SolidColorBrush
        x:Key="nodeFillBrush"
        Color="Black"
        >
    </SolidColorBrush>

    <!-- Text color. -->
    <SolidColorBrush
        x:Key="nodeTextBrush"
        Color="Gray"
        >
    </SolidColorBrush>

    <!-- The brush for connections. -->
    <SolidColorBrush
        x:Key="connectionBrush"
        Color="LightGray"
        />
    
    <!-- The brush for connectors. -->
    <SolidColorBrush
        x:Key="connectorBackgroundBrush"
        Color="White"
        />
    
    <!-- The brush for common controls. -->
    <SolidColorBrush
        x:Key="controlBackground"
        Color="Black"
        />
    <Color x:Key="backgroundColor" R="0" G="0" B="0"/>

    <SolidColorBrush
        x:Key="controlSecondaryBackground"
        Color="#FF3A3A3A"
        />
    <!--
    Define a style for 'NodeItem'.
    
    Binds 'X' and 'Y' in the view-model (the 'NodeViewModel' class)
    to 'X' and 'Y' in the NodeItem class.
    
    This sets the position of the node within the Canvas.
    -->
    <Style TargetType="{x:Type NetworkUI:NodeItem}">
        <Setter
            Property="X"
            Value="{Binding X}"
            />
        <Setter
            Property="Y"
            Value="{Binding Y}"
            />
        <Setter
            Property="ZIndex"
            Value="{Binding ZIndex}"
            />
        <Setter
            Property="IsSelected"
            Value="{Binding IsSelected}"
            />
        <Setter
            Property="IsHighlighted"
            Value="{Binding IsHighlighted}"
            />
    </Style>

    <!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
    <Style TargetType="{x:Type NetworkUI:ConnectorItem}">
        <!-- 
        Data-binding for the connector hotspot.
        ConnectorItem automatically computes its center points and assings this value
        to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
        view-model.
        -->
        <Setter Property="Hotspot"
                    Value="{Binding Hotspot, Mode=OneWayToSource}"
                    />

        <!-- The visual template. -->
        <Setter Property="Template"
                    >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}">
                    <!-- The visual for the connector. -->
                    <!--<Ellipse
                                Stroke="{StaticResource nodeBorderBrush}"
                                Fill="{StaticResource connectorBackgroundBrush}"
                                />-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
    A data-template that defines the UI for input connectors.
    -->
    <DataTemplate
        x:Key="inputConnectorTemplate"
        >
        <Grid
            Margin="0,0,0,0"
            >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- The 'ConnectorItem' or anchor point for the connector. -->
            <NetworkUI:ConnectorItem 
                Grid.Column="0"
                Cursor="Hand"                    
                />

            <!-- The name of the connector. -->            
            <!--<TextBlock
                Grid.Column="1"
                Margin="5,0,0,0"
                Text="{Binding Name}"
                VerticalAlignment="Center"
                />-->
        </Grid>
    </DataTemplate>

    <!-- 
    A data-template that defines the UI for output connectors.
    -->
    <DataTemplate
        x:Key="outputConnectorTemplate"
        >
        <Grid
            HorizontalAlignment="Right"
            Margin="0,0,0,0"
            >
            <Grid.ColumnDefinitions>
            </Grid.ColumnDefinitions>

            <!-- The name of the connector. -->
            <!--<TextBlock
                Grid.Column="0"
                Text="{Binding Name}"
                VerticalAlignment="Center"
                Margin="0,0,5,0"
                />-->

            <Grid
                Grid.Column="0"
                Cursor="Hand"
                >

                <!-- The 'ConnectorItem' or anchor point for the connector. -->
                <NetworkUI:ConnectorItem />
                    
                <!-- Show a black dot at the start of the arrow when connected. -->
                <!--<Ellipse
                    Visibility="{Binding IsConnectionAttached, Converter={StaticResource booleanToVisibilityConverter}}"
                    Margin="3"
                    Fill="{StaticResource connectionBrush}"
                    IsHitTestVisible="False"
                    />-->
            </Grid>
        </Grid>
    </DataTemplate>
    
    <DataTemplate
        x:Key="searchControlTemplate">
        <Label Content="{Binding Name, Mode=OneWay}" 
               Background="{StaticResource controlSecondaryBackground}" 
               Foreground="{StaticResource nodeTextBrush}"/>
    </DataTemplate>

    <DataTemplate
        x:Key="newsFeedItemTemplate">
        <Label Content="{Binding Artist.Name}" 
               Background="{StaticResource controlSecondaryBackground}" 
               Foreground="{StaticResource nodeTextBrush}"/>
    </DataTemplate>

    <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
        <Border Background="White" x:Name="Bd" BorderBrush="Black" CornerRadius="15">
            <ScrollViewer x:Name="PART_ContentHost"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Bd"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="100"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="30"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="BorderlessButtonStyle" TargetType="Button">

        <Setter Property="Background" Value="{StaticResource controlSecondaryBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource nodeTextBrush}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >

                    <Border Name="border" 
                                        BorderThickness="0" 
                                        Background="{TemplateBinding Background}"
                                        >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ResizeGripBorderStyle" TargetType="Rectangle">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Fill" Value="Transparent" />
        <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}}" />
        <EventSetter Event="MouseLeftButtonDown" Handler="OnResizeInit"/>
        <EventSetter Event="MouseLeftButtonUp" Handler="OnResizeEnd"/>
        <EventSetter Event="MouseMove" Handler="OnResizeMove"/>
    </Style>

    <Style x:Key="MaximizeDragGripBorderStyle" TargetType="Rectangle">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Fill" Value="Transparent" />
        <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}}" />
        <EventSetter Event="MouseLeftButtonDown" Handler="OnMaximizeDragGripLeftButtonDown"/>
    </Style>

    <!--Scrollbar Thumbs-->
    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="8" Height="Auto"  Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBars-->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{StaticResource nodeTextBrush}" />
        <Setter Property="Background" Value="{StaticResource controlBackground}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="Auto" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>

                        <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="8" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource controlSecondaryBackground}" />
    </Style>

    <Style x:Key="ApplicationButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource nodeTextBrush}"/>
    </Style>
    
    <!-- Scroll Viewer -->
    <!-- TODO: Need to find out how to get click-and-drag working with this control style. -->
    <Style x:Key="UpdatedScrollViewerStyle" TargetType="ScrollViewer" BasedOn="{StaticResource {x:Type ScrollViewer}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ScrollContentPresenter x:Name="ScrollContentPresenter"
                                                  Cursor="{TemplateBinding Cursor}"
                                                  Margin="{TemplateBinding Margin}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"/>

                            <Rectangle Grid.Column="1" Grid.Row="1" Fill="{StaticResource controlBackground}"/>

                            <ScrollBar x:Name="PART_VerticalScrollBar" Width="18"
                                     IsTabStop="False"
                                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                     Grid.Column="1" Grid.Row="0" Orientation="Vertical"
                                     ViewportSize="{TemplateBinding ViewportHeight}"
                                     Maximum="{TemplateBinding ScrollableHeight}"
                                     Minimum="0"
                                     Value="{TemplateBinding VerticalOffset}"
                                     Margin="0,-1,-1,-1"/>

                            <ScrollBar x:Name="PART_HorizontalScrollBar" Height="18"
                                     IsTabStop="False"
                                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                     Grid.Column="0" Grid.Row="1" Orientation="Horizontal"
                                     ViewportSize="{TemplateBinding ViewportWidth}"
                                     Maximum="{TemplateBinding ScrollableWidth}"
                                     Minimum="0"
                                     Value="{TemplateBinding HorizontalOffset}"
                                     Margin="-1,0,-1,-1"/>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>